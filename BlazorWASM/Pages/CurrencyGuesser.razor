@page "/currency-guesser"
@using System.Runtime.Intrinsics.X86
@inject APIService ApiService

<h3>Currency Guesser</h3>

@if (_ready)
{
    <div class="flag-wrapper">
        <h2>Score: @_score</h2>
        <img class="flag-wrapper__image" alt="Current flag" src="@_currentCountry.Flags.svg"/>
        <div class="button-container">
            @foreach (Country option in _options)
            {
                foreach (var optionCurrency in option.Currencies!)
                {
                    <button class="btn btn-primary flag-wrapper__button"
                            @onclick="() => CheckCurrency(optionCurrency.Key)">@optionCurrency.Key <br/> @optionCurrency.Value.Name
                    </button>
                }
            }
        </div>

    </div>
}
else
{
    <p>Loading...</p>
}


<style>
    .flag-wrapper {
        justify-content: center;
        display: flex;
        flex-wrap: wrap;
        border: 1px solid lightgray;
        border-radius: 5px;
        max-width: 500px;
    }

    .flag-wrapper__image {
        max-width: 400px;
        margin-bottom: 10px;
        margin-top: 10px;
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        width: 100%;
        margin: 15px;
    }

    .flag-wrapper__button {
        margin-bottom: 5px;
        justify-content: space-evenly;
        flex: 1;
        min-width: 200px; /* Adjust this value based on your longest currency name */
    }
    
    .btn-primary {
        background-color: transparent;
        color: black;
        border: 1px solid lightgray;
        transition: background-color 0.3s ease-in-out;
    }
    
    .btn-primary:hover {
        background-color: lightgray;
        color: black;
    }
</style>

@code {
    const int _optionsLength = 4;
    
    List<Country> _countries = new();
    Country _currentCountry = new();
    Random _randHelper = new();
    Country[] _options = new Country[_optionsLength];
    int _score = 0;
    bool _ready;

    protected override async Task OnInitializedAsync()
    {
        _countries = await ApiService.GetCountriesAsync();
        DeleteMultipleCurrencies();
        RemoveCountriesWithoutCurrencies();
        SetCurrentCountry();
        SetOptions();
        _ready = true;
    }

    private void SetCurrentCountry()
    {
        _currentCountry = _countries[_randHelper.Next(0, _countries.Count)];
    }

    private void SetOptions()
    {
        for (int i = 0; i < _optionsLength - 1; i++)
        {
            _options[i] = _countries[_randHelper.Next(0, _countries.Count)];
        }

        _options[_optionsLength - 1] = _currentCountry;
        ShuffleOptions();
    }

    private void CheckCurrency(string currency)
    {
        Console.WriteLine("Clicked currency: " + currency);
        if (currency == _currentCountry.Currencies?.First().Key)
        {
            _score++;
        }
        SetCurrentCountry();
        SetOptions();
    }

    private void DeleteMultipleCurrencies()
    {
        foreach (Country country in _countries)
        {
            if (country.Currencies?.Count > 1)
            {
                var firstCurrency = country.Currencies.First();
                country.Currencies.Clear();
                country.Currencies.Add(firstCurrency.Key, firstCurrency.Value);
            }
        }
    }

    private void ShuffleOptions()
    {
        for (int i = _optionsLength - 1; i > 0; i--)
        {
            int j = _randHelper.Next(0, i + 1);
            (_options[i], _options[j]) = (_options[j], _options[i]);
        }
    }

    private void RemoveCountriesWithoutCurrencies()
    {
        _countries.RemoveAll(country => country.Currencies == null);
    }

}