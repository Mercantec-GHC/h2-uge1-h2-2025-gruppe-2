@page "/currency-guesser"
@using System.Text.Json
@inject APIService ApiService
@inject IJSRuntime JSRuntime

<h3>Currency Guesser</h3>

@if (_ready)
{
    @if (_scoreStatus != null && _scoreStatus == false)
    {
        <p>Wrong guess buddy! @_statusCountry uses the @_statusCurrency (@_statusCurrencyAbb)</p>
        <p><b>Final score</b>: @_score</p>
        <p><b>High score</b>: @_highScore</p>

        <button class="btn btn-primary" @onclick="Restart">Restart?</button>
    }
    else
    {
        <div class="game-container">
            <div class="flag-wrapper">
                <img class="flag-wrapper__image" alt="Current flag" src="@_currentCountry.Flags.svg"/>
                <div class="button-container">
                    @foreach (Country option in _options)
                    {
                        foreach (var optionCurrency in option.Currencies!)
                        {
                            <button class="btn btn-primary flag-wrapper__button"
                                    @onclick="() => CheckCurrency(optionCurrency.Key)">@optionCurrency.Key <br/> @optionCurrency.Value.Name
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="status-wrapper">
                <h2>Score: @_score</h2>
                @if (_scoreStatus != null)
                {
                    <h3>Correct!</h3>

                    <p>@_statusCountry uses the @_statusCurrency (@_statusCurrencyAbb)</p>
                }
            </div>
        </div>
    }
}
else
{
    <p>Loading...</p>
}

<style>
    .game-container {
        display: flex;
        gap: 20px;
        align-items: flex-start;
    }

    .status-wrapper {
        width: fit-content;
        flex: 2;
        border: 1px solid lightgray;
        border-radius: 5px;
        padding: 15px;
    }

    .flag-wrapper {
        justify-content: center;
        display: flex;
        flex-wrap: wrap;
        border: 1px solid lightgray;
        border-radius: 5px;
        max-width: 500px;
        flex: 2;
    }

    .flag-wrapper__image {
        border: 1px solid lightgray;
        max-width: 400px;
        margin-bottom: 10px;
        margin-top: 10px;
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        width: 100%;
        margin: 15px;
    }

    .flag-wrapper__button {
        margin-bottom: 5px;
        justify-content: space-evenly;
        flex: 1;
        min-width: 200px; /* Adjust this value based on your longest currency name */
    }

    .btn-primary {
        background-color: transparent;
        color: black;
        border: 1px solid lightgray;
        transition: background-color 0.3s ease-in-out;
    }

    .btn-primary:hover {
        background-color: lightgray;
        color: black;
    }
</style>

<script>
    window.gameHelpers = {
        saveScore: function (score) {
            console.log("Saving score to local storage:", score);
            localStorage.setItem("CurrencyGuesserHighScore", score.toString());
        },

        loadScore: function () {
            const score = localStorage.getItem("CurrencyGuesserHighScore");
            return score ? parseInt(score) : 0;
        }
    };

</script>

@code {
    const int _optionsLength = 4;

    List<Country> _countries = new();
    Country _currentCountry = new();
    Random _randHelper = new();
    Country[] _options = new Country[_optionsLength];
    int _score = 0;
    bool _ready;

    bool? _scoreStatus;
    string _statusCurrencyAbb = "";
    string _statusCurrency = "";
    string _statusCountry = "";
    int _highScore;
    const string PutUrl = "http://localhost:8080/high-score?high-score-value=";
    const string GetUrl = "http://localhost:8080/high-score";

    protected override async Task OnInitializedAsync()
    {
        _countries = await ApiService.GetCountriesAsync();
        DeleteMultipleCurrencies();
        RemoveCountriesWithoutCurrencies();
        SetCurrentCountry();
        SetOptions();
        _highScore = await LoadHighScore();
        _ready = true;
    }

    private async Task SaveToLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("gameHelpers.saveScore", _score);
        /*using var httpClient = new HttpClient();
        try
        {
            var response = await httpClient.PutAsync(PutUrl + _score, null);
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Failed to update high score API.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return;
        }*/
    }

    private async Task<int> LoadHighScore()
    {
        int score = await JSRuntime.InvokeAsync<int>("gameHelpers.loadScore");
        /*using var httpClient = new HttpClient();
        int score = 0;
        
        try
        {
            var response = await httpClient.GetAsync(GetUrl);
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Failed to update high score API.");
            }
            else
            {
                
                var json = await response.Content.ReadAsStringAsync();
                // Extract the value from the JSON object
                using var doc = JsonDocument.Parse(json);
                var highScoreProperty = doc.RootElement.GetProperty("high-score");
                score = highScoreProperty.GetInt32();

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return -1;
        }*/

        return score;
    }


    private void SetCurrentCountry()
    {
        _currentCountry = _countries[_randHelper.Next(0, _countries.Count)];
    }

    private void SetOptions()
    {
        for (int i = 0; i < _optionsLength - 1; i++)
        {
            _options[i] = _countries[_randHelper.Next(0, _countries.Count)];
        }

        _options[_optionsLength - 1] = _currentCountry;
        ShuffleOptions();
    }

    private async Task CheckCurrency(string currency)
    {
        Console.WriteLine("Clicked currency: " + currency);
        if (currency == _currentCountry.Currencies?.First().Key)
        {
            _score++;
            _scoreStatus = true;
        }
        else
        {
            _scoreStatus = false;
            if (_score > _highScore)
            {
                Console.WriteLine("New highscore! " + _score);
                await SaveToLocalStorage();
                _highScore = _score;
            }
            else
            {
                Console.WriteLine("No new high score...");
            }
        }

        _statusCurrencyAbb = _currentCountry.Currencies.First().Key;
        _statusCurrency = _currentCountry.Currencies.First().Value.Name;
        _statusCountry = _currentCountry.Name.Common;
        SetCurrentCountry();
        SetOptions();
    }

    private void DeleteMultipleCurrencies()
    {
        foreach (Country country in _countries)
        {
            if (country.Currencies?.Count > 1)
            {
                var firstCurrency = country.Currencies.First();
                country.Currencies.Clear();
                country.Currencies.Add(firstCurrency.Key, firstCurrency.Value);
            }
        }
    }

    private void ShuffleOptions()
    {
        for (int i = _optionsLength - 1; i > 0; i--)
        {
            int j = _randHelper.Next(0, i + 1);
            (_options[i], _options[j]) = (_options[j], _options[i]);
        }
    }

    private void RemoveCountriesWithoutCurrencies()
    {
        _countries.RemoveAll(country => country.Currencies == null);
    }

    private async Task Restart()
    {
        _score = 0;
        _scoreStatus = null;
        _highScore = await LoadHighScore();
    }

}