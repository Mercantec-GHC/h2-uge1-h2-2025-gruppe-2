@page "/my-api-project"
@inject APIService ApiService

<h3>MitAPIProjekt</h3>

<div class="card w-auto">
    <h1>Benzin analyse</h1>
    @if (_firstPrice != null || _lastPrice != null)
    {
        <p>First fuel price (@_firstPrice?.Date): @_firstPrice?.Price</p>
        <p>Last fuel price (@_lastPrice?.Date): @_lastPrice?.Price</p>
    }
</div>

@if (_loading)
{
    <p><em>Loading...</em></p>
}

<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800"/>
</div>

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    bool _loading = true;

    Miles? _firstPrice = new();
    Miles? _lastPrice = new();

    protected override async Task OnInitializedAsync()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        var dataStuff = SetData(await ApiService.GetMilesPricesAsync());
        List<string> labels = dataStuff.Item1;
        List<double?> data = dataStuff.Item2;

        var datasets = new List<IChartDataset>();

        var dataset = new LineChartDataset
        {
            Label = "Miles95",
            Data = data,
            BackgroundColor = colors[2],
            BorderColor = colors[2],
            BorderWidth = 2,
            HoverBorderWidth = 4,
            PointRadius = [0],
        };
        datasets.Add(dataset);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Scales.Y!.Min = 8;
        lineChartOptions.Scales.Y!.Max = 20;
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Date", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Price", Display = true };

        lineChartOptions.Plugins.Title!.Text = "Mile95 price over time";
        lineChartOptions.Plugins.Title.Display = true;
        await lineChart.InitializeAsync(chartData, lineChartOptions);
        _loading = false;
    }

    private (List<string>, List<double?>) SetData(List<Miles> miles)
    {
        List<string> dates = [];
        List<double?> prices = [];
        foreach (Miles mile in miles)
        {
            dates.Add(mile.Date);
            prices.Add(mile.Price);
        }

        if (dates.Count == 0 || prices.Count == 0)
            throw new Exception("Dates or prices are empty");

        _firstPrice.Price = miles[0].Price;
        _firstPrice.Date = miles[0].Date;
        _lastPrice.Price = miles[miles.Count - 1].Price;
        _lastPrice.Date = miles[miles.Count - 1].Date;
        Console.WriteLine(_firstPrice);
        Console.WriteLine(_lastPrice);

        return (dates, prices);
    }

}